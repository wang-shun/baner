package org.inn.baner.persist.mapper;

import static org.apache.ibatis.jdbc.SqlBuilder.BEGIN;
import static org.apache.ibatis.jdbc.SqlBuilder.DELETE_FROM;
import static org.apache.ibatis.jdbc.SqlBuilder.FROM;
import static org.apache.ibatis.jdbc.SqlBuilder.INSERT_INTO;
import static org.apache.ibatis.jdbc.SqlBuilder.ORDER_BY;
import static org.apache.ibatis.jdbc.SqlBuilder.SELECT;
import static org.apache.ibatis.jdbc.SqlBuilder.SELECT_DISTINCT;
import static org.apache.ibatis.jdbc.SqlBuilder.SET;
import static org.apache.ibatis.jdbc.SqlBuilder.SQL;
import static org.apache.ibatis.jdbc.SqlBuilder.UPDATE;
import static org.apache.ibatis.jdbc.SqlBuilder.VALUES;
import static org.apache.ibatis.jdbc.SqlBuilder.WHERE;

import java.util.List;
import java.util.Map;
import org.inn.baner.bean.AcFlow;
import org.inn.baner.bean.AcFlowExample.Criteria;
import org.inn.baner.bean.AcFlowExample.Criterion;
import org.inn.baner.bean.AcFlowExample;

public class AcFlowSqlProvider {

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table ac_flow
     *
     * @mbggenerated
     */
    public String countByExample(AcFlowExample example) {
        BEGIN();
        SELECT("count (*)");
        FROM("ac_flow");
        applyWhere(example, false);
        return SQL();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table ac_flow
     *
     * @mbggenerated
     */
    public String deleteByExample(AcFlowExample example) {
        BEGIN();
        DELETE_FROM("ac_flow");
        applyWhere(example, false);
        return SQL();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table ac_flow
     *
     * @mbggenerated
     */
    public String insertSelective(AcFlow record) {
        BEGIN();
        INSERT_INTO("ac_flow");
        
        if (record.getPlatflow() != null) {
            VALUES("platflow", "#{platflow,jdbcType=VARCHAR}");
        }
        
        if (record.getAcno() != null) {
            VALUES("acno", "#{acno,jdbcType=VARCHAR}");
        }
        
        if (record.getOwnerid() != null) {
            VALUES("ownerid", "#{ownerid,jdbcType=CHAR}");
        }
        
        if (record.getOwnername() != null) {
            VALUES("ownername", "#{ownername,jdbcType=VARCHAR}");
        }
        
        if (record.getAmount() != null) {
            VALUES("amount", "#{amount,jdbcType=NUMERIC}");
        }
        
        if (record.getTrantype() != null) {
            VALUES("trantype", "#{trantype,jdbcType=CHAR}");
        }
        
        if (record.getOutflowno() != null) {
            VALUES("outflowno", "#{outflowno,jdbcType=VARCHAR}");
        }
        
        if (record.getFromsysid() != null) {
            VALUES("fromsysid", "#{fromsysid,jdbcType=VARCHAR}");
        }
        
        if (record.getCcy() != null) {
            VALUES("ccy", "#{ccy,jdbcType=CHAR}");
        }
        
        if (record.getStat() != null) {
            VALUES("stat", "#{stat,jdbcType=CHAR}");
        }
        
        if (record.getCreatetime() != null) {
            VALUES("createtime", "#{createtime,jdbcType=TIMESTAMP}");
        }
        
        if (record.getUpdatetime() != null) {
            VALUES("updatetime", "#{updatetime,jdbcType=TIMESTAMP}");
        }
        
        if (record.getRemark() != null) {
            VALUES("remark", "#{remark,jdbcType=VARCHAR}");
        }
        
        return SQL();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table ac_flow
     *
     * @mbggenerated
     */
    public String selectByExample(AcFlowExample example) {
        BEGIN();
        if (example != null && example.isDistinct()) {
            SELECT_DISTINCT("platflow");
        } else {
            SELECT("platflow");
        }
        SELECT("acno");
        SELECT("ownerid");
        SELECT("ownername");
        SELECT("amount");
        SELECT("trantype");
        SELECT("outflowno");
        SELECT("fromsysid");
        SELECT("ccy");
        SELECT("stat");
        SELECT("createtime");
        SELECT("updatetime");
        SELECT("remark");
        FROM("ac_flow");
        applyWhere(example, false);
        
        if (example != null && example.getOrderByClause() != null) {
            ORDER_BY(example.getOrderByClause());
        }
        
        return SQL();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table ac_flow
     *
     * @mbggenerated
     */
    public String updateByExampleSelective(Map<String, Object> parameter) {
        AcFlow record = (AcFlow) parameter.get("record");
        AcFlowExample example = (AcFlowExample) parameter.get("example");
        
        BEGIN();
        UPDATE("ac_flow");
        
        if (record.getPlatflow() != null) {
            SET("platflow = #{record.platflow,jdbcType=VARCHAR}");
        }
        
        if (record.getAcno() != null) {
            SET("acno = #{record.acno,jdbcType=VARCHAR}");
        }
        
        if (record.getOwnerid() != null) {
            SET("ownerid = #{record.ownerid,jdbcType=CHAR}");
        }
        
        if (record.getOwnername() != null) {
            SET("ownername = #{record.ownername,jdbcType=VARCHAR}");
        }
        
        if (record.getAmount() != null) {
            SET("amount = #{record.amount,jdbcType=NUMERIC}");
        }
        
        if (record.getTrantype() != null) {
            SET("trantype = #{record.trantype,jdbcType=CHAR}");
        }
        
        if (record.getOutflowno() != null) {
            SET("outflowno = #{record.outflowno,jdbcType=VARCHAR}");
        }
        
        if (record.getFromsysid() != null) {
            SET("fromsysid = #{record.fromsysid,jdbcType=VARCHAR}");
        }
        
        if (record.getCcy() != null) {
            SET("ccy = #{record.ccy,jdbcType=CHAR}");
        }
        
        if (record.getStat() != null) {
            SET("stat = #{record.stat,jdbcType=CHAR}");
        }
        
        if (record.getCreatetime() != null) {
            SET("createtime = #{record.createtime,jdbcType=TIMESTAMP}");
        }
        
        if (record.getUpdatetime() != null) {
            SET("updatetime = #{record.updatetime,jdbcType=TIMESTAMP}");
        }
        
        if (record.getRemark() != null) {
            SET("remark = #{record.remark,jdbcType=VARCHAR}");
        }
        
        applyWhere(example, true);
        return SQL();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table ac_flow
     *
     * @mbggenerated
     */
    public String updateByExample(Map<String, Object> parameter) {
        BEGIN();
        UPDATE("ac_flow");
        
        SET("platflow = #{record.platflow,jdbcType=VARCHAR}");
        SET("acno = #{record.acno,jdbcType=VARCHAR}");
        SET("ownerid = #{record.ownerid,jdbcType=CHAR}");
        SET("ownername = #{record.ownername,jdbcType=VARCHAR}");
        SET("amount = #{record.amount,jdbcType=NUMERIC}");
        SET("trantype = #{record.trantype,jdbcType=CHAR}");
        SET("outflowno = #{record.outflowno,jdbcType=VARCHAR}");
        SET("fromsysid = #{record.fromsysid,jdbcType=VARCHAR}");
        SET("ccy = #{record.ccy,jdbcType=CHAR}");
        SET("stat = #{record.stat,jdbcType=CHAR}");
        SET("createtime = #{record.createtime,jdbcType=TIMESTAMP}");
        SET("updatetime = #{record.updatetime,jdbcType=TIMESTAMP}");
        SET("remark = #{record.remark,jdbcType=VARCHAR}");
        
        AcFlowExample example = (AcFlowExample) parameter.get("example");
        applyWhere(example, true);
        return SQL();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table ac_flow
     *
     * @mbggenerated
     */
    public String updateByPrimaryKeySelective(AcFlow record) {
        BEGIN();
        UPDATE("ac_flow");
        
        if (record.getAcno() != null) {
            SET("acno = #{acno,jdbcType=VARCHAR}");
        }
        
        if (record.getOwnerid() != null) {
            SET("ownerid = #{ownerid,jdbcType=CHAR}");
        }
        
        if (record.getOwnername() != null) {
            SET("ownername = #{ownername,jdbcType=VARCHAR}");
        }
        
        if (record.getAmount() != null) {
            SET("amount = #{amount,jdbcType=NUMERIC}");
        }
        
        if (record.getTrantype() != null) {
            SET("trantype = #{trantype,jdbcType=CHAR}");
        }
        
        if (record.getOutflowno() != null) {
            SET("outflowno = #{outflowno,jdbcType=VARCHAR}");
        }
        
        if (record.getFromsysid() != null) {
            SET("fromsysid = #{fromsysid,jdbcType=VARCHAR}");
        }
        
        if (record.getCcy() != null) {
            SET("ccy = #{ccy,jdbcType=CHAR}");
        }
        
        if (record.getStat() != null) {
            SET("stat = #{stat,jdbcType=CHAR}");
        }
        
        if (record.getCreatetime() != null) {
            SET("createtime = #{createtime,jdbcType=TIMESTAMP}");
        }
        
        if (record.getUpdatetime() != null) {
            SET("updatetime = #{updatetime,jdbcType=TIMESTAMP}");
        }
        
        if (record.getRemark() != null) {
            SET("remark = #{remark,jdbcType=VARCHAR}");
        }
        
        WHERE("platflow = #{platflow,jdbcType=VARCHAR}");
        
        return SQL();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table ac_flow
     *
     * @mbggenerated
     */
    protected void applyWhere(AcFlowExample example, boolean includeExamplePhrase) {
        if (example == null) {
            return;
        }
        
        String parmPhrase1;
        String parmPhrase1_th;
        String parmPhrase2;
        String parmPhrase2_th;
        String parmPhrase3;
        String parmPhrase3_th;
        if (includeExamplePhrase) {
            parmPhrase1 = "%s #{example.oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{example.oredCriteria[%d].allCriteria[%d].value} and #{example.oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{example.oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{example.oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{example.oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        } else {
            parmPhrase1 = "%s #{oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{oredCriteria[%d].allCriteria[%d].value} and #{oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        }
        
        StringBuilder sb = new StringBuilder();
        List<Criteria> oredCriteria = example.getOredCriteria();
        boolean firstCriteria = true;
        for (int i = 0; i < oredCriteria.size(); i++) {
            Criteria criteria = oredCriteria.get(i);
            if (criteria.isValid()) {
                if (firstCriteria) {
                    firstCriteria = false;
                } else {
                    sb.append(" or ");
                }
                
                sb.append('(');
                List<Criterion> criterions = criteria.getAllCriteria();
                boolean firstCriterion = true;
                for (int j = 0; j < criterions.size(); j++) {
                    Criterion criterion = criterions.get(j);
                    if (firstCriterion) {
                        firstCriterion = false;
                    } else {
                        sb.append(" and ");
                    }
                    
                    if (criterion.isNoValue()) {
                        sb.append(criterion.getCondition());
                    } else if (criterion.isSingleValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase1, criterion.getCondition(), i, j));
                        } else {
                            sb.append(String.format(parmPhrase1_th, criterion.getCondition(), i, j,criterion.getTypeHandler()));
                        }
                    } else if (criterion.isBetweenValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase2, criterion.getCondition(), i, j, i, j));
                        } else {
                            sb.append(String.format(parmPhrase2_th, criterion.getCondition(), i, j, criterion.getTypeHandler(), i, j, criterion.getTypeHandler()));
                        }
                    } else if (criterion.isListValue()) {
                        sb.append(criterion.getCondition());
                        sb.append(" (");
                        List<?> listItems = (List<?>) criterion.getValue();
                        boolean comma = false;
                        for (int k = 0; k < listItems.size(); k++) {
                            if (comma) {
                                sb.append(", ");
                            } else {
                                comma = true;
                            }
                            if (criterion.getTypeHandler() == null) {
                                sb.append(String.format(parmPhrase3, i, j, k));
                            } else {
                                sb.append(String.format(parmPhrase3_th, i, j, k, criterion.getTypeHandler()));
                            }
                        }
                        sb.append(')');
                    }
                }
                sb.append(')');
            }
        }
        
        if (sb.length() > 0) {
            WHERE(sb.toString());
        }
    }
}